plugins {
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
    // id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
    id "org.springframework.boot" version "2.1.0.RELEASE"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.google.cloud.tools.jib" version "0.10.0"
    // id "com.palantir.git-version" version "0.11.0"
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile project(':shared')

    // Infrastructure
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
//    compile 'org.slf4j:slf4j-simple:1.7.25'
//    compile 'com.github.jsr-330:core:1.4.0'

    // Spring Boot
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.3.21'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'

    // gRPC
    compile 'org.lognet:grpc-spring-boot-starter:2.4.1'
//    compile "io.grpc:grpc-netty-shaded:$grpcVersion"

    // Testing
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    // See also https://blog.philipphauer.de/best-practices-unit-testing-kotlin/
    testImplementation 'io.mockk:mockk:1.8.8'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat = "full"
    }
}

startScripts {
    mainClassName 'info.maaskant.wmsnotes.server.ApplicationKt'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'info.maaskant.wmsnotes.server.ApplicationKt'
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}

jib {
    container.ports = [ "6565" ]
    from.image = "gcr.io/distroless/java@sha256:b430543bea1d8326e767058bdab3a2482ea45f59d7af5c5c61334cd29ede88a1"
    to.image = "scheleaap/wmsnotes-server:latest"
}
