package info.maaskant.wmsnotes.model

import arrow.core.Either
import arrow.core.Option
import arrow.core.extensions.option.monad.flatMap
import arrow.core.getOrElse
import kotlinx.collections.immutable.ImmutableList
import kotlinx.collections.immutable.persistentListOf
import kotlinx.collections.immutable.plus

/**
 * @property requestId An identifier to trace the request.
 * @property outcome All executed commands with either an error or a list of new events. Not all commands may have been executed.
 * @property newEvents All events generated by the execution of the commands.
 * @property origin The origin of the executed commands.
 */
data class CommandResult constructor(
        val requestId: Int,
        val outcome: ImmutableList<Pair<Command, Either<CommandError, Option<Event>>>>,
        val origin: CommandOrigin

) {
    val newEvents: ImmutableList<Event> by lazy {
        outcome.asSequence()
                .map { it.second }
                .fold(initial = persistentListOf<Event>(), operation = { acc, i ->
                    i.map { j ->
                        j.map { k ->
                            acc + k
                        }.getOrElse { acc }
                    }.getOrElse { acc }
                })
    }

    val allSuccessful: Boolean = outcome.asSequence()
            .map { it.second }
            .all { it.isRight() }
}
