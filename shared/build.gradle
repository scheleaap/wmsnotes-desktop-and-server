buildscript {
    ext.grpcVersion = '1.15.0'
}

plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "com.google.protobuf" version "0.8.6"
    id "maven-publish"
//    id "signing"
}

dependencies {
    // Infrastructure
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7"
    api 'org.slf4j:slf4j-api:1.7.25'
    testRuntime 'org.slf4j:slf4j-simple:1.7.25'
    api 'au.com.console:kassava:1.0.0'
    api 'javax.inject:javax.inject:1'
    implementation 'commons-codec:commons-codec:1.11'
    api 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // Storage: Serialization
    api 'com.esotericsoftware:kryo:5.0.0-RC1' // Selected based on https://github.com/eishay/jvm-serializers/wiki

    // gRPC
    api "io.grpc:grpc-protobuf-lite:$grpcVersion"
    api "io.grpc:grpc-stub:$grpcVersion"
    compileOnly "javax.annotation:javax.annotation-api:1.2" // See https://github.com/grpc/grpc-java/issues/4725

    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.3.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.1")
    testImplementation("org.assertj:assertj-core:3.11.1")
    // See also https://blog.philipphauer.de/best-practices-unit-testing-kotlin/
    testImplementation 'io.mockk:mockk:1.8.8'
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.0.0' }
    plugins {
        javalite { artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0' }
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion" }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins { remove java }
            task.plugins {
                javalite {}
                grpc { option 'lite' }
            }
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.6'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat = "full"
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = jar.baseName
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'WMS Notes Shared Functionality'
                description = 'Functionality shared by the WMS Notes clients and/or server'
//                url = 'http://www.example.com/library'
//                licenses {
//                    license {
//                        name = 'The Apache License, Version 2.0'
//                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        id = 'johnd'
//                        name = 'John Doe'
//                        email = 'john.doe@example.com'
//                    }
//                }
//                scm {
//                    connection = 'scm:git:git://example.com/my-library.git'
//                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
//                    url = 'http://example.com/my-library/'
//                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

//signing {
//    sign publishing.publications.mavenJava
//}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html4', true)
    }
}
