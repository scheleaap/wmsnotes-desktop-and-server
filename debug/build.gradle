plugins {
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
    // id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
    id "org.springframework.boot" version "2.1.0.RELEASE"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

ext {
    versions = [
            tornadofx    : "1.7.15",
            controlsfx   : "8.40.14",
            fontawesomefx: "8.9",
            richtextfx   : "0.9.1",
            flexmark     : "0.32.20",
    ]
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile project(':shared')

    // Infrastructure
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile("org.apache.commons:commons-lang3:3.7")
    runtime 'org.slf4j:slf4j-simple:1.7.25'

    // Testing
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    // See also https://blog.philipphauer.de/best-practices-unit-testing-kotlin/
    testImplementation 'io.mockk:mockk:1.9.2'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat = "full"
    }
}

startScripts {
    mainClassName 'info.maaskant.wmsnotes.debug.Main'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'info.maaskant.wmsnotes.debug.Main'
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}
