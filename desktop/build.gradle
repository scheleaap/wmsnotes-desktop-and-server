plugins {
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
    // id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
    id "org.openjfx.javafxplugin" version "0.0.8"
    id "org.springframework.boot" version "2.1.0.RELEASE"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

ext {
    versions = [
            rxkotlinfx   : "2.2.2",
            tornadofx    : "1.7.19",
            controlsfx   : "8.40.14",
            fontawesomefx: "8.9",
            richtextfx   : "0.10.1",
            flexmark     : "0.32.20",
    ]
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile project(':shared')

    // Infrastructure
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile("org.apache.commons:commons-lang3:3.7")

    // Spring Boot
    // Examples on how to integrate JavaFX with Spring Boot:
    // - https://github.com/bkenn/springboot-tornadofx
    // - https://github.com/sedovalx/spring-boot-tornadofx/tree/master/src/main/kotlin/ru/croc/spring/ui/sample
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.3.21'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'

    // gRPC
    compile "io.grpc:grpc-netty-shaded:$grpcVersion"

    // JavaFX, TornadoFX, RxKotlinFX, ControlsFX
    implementation("com.github.thomasnield:rxkotlinfx:${versions.rxkotlinfx}")
    implementation("no.tornado:tornadofx:${versions.tornadofx}")
    implementation("no.tornado:tornadofx-controlsfx:0.1.1")
    implementation("org.controlsfx:controlsfx:${versions.controlsfx}")
    implementation("de.jensd:fontawesomefx:${versions.fontawesomefx}")
    implementation("org.fxmisc.richtext:richtextfx:${versions.richtextfx}")
    implementation("com.miglayout:miglayout-javafx:5.2")
    implementation("com.vladsch.flexmark:flexmark:${versions.flexmark}")
    implementation("com.vladsch.flexmark:flexmark-ext-anchorlink:${versions.flexmark}")
    implementation("com.vladsch.flexmark:flexmark-ext-autolink:${versions.flexmark}")
    implementation("com.vladsch.flexmark:flexmark-ext-emoji:${versions.flexmark}")
    implementation("com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:${versions.flexmark}")
    implementation("com.vladsch.flexmark:flexmark-ext-gfm-tables:${versions.flexmark}")
//    implementation("com.vladsch.flexmark:flexmark-ext-wikilink:${versions.flexmark}")
    implementation("com.vladsch.flexmark:flexmark-ext-youtube-embedded:${versions.flexmark}")

    // Configuration
//    compile 'com.natpryce:konfig:1.6.10.0'
//    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.4'

    // Testing
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    // See also https://blog.philipphauer.de/best-practices-unit-testing-kotlin/
    testImplementation 'io.mockk:mockk:1.9.2'
}

javafx {
    version = "11.0.2"
    modules = [ "javafx.controls", "javafx.web" ]
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat = "full"
    }
}

startScripts {
    mainClassName 'info.maaskant.wmsnotes.desktop.app.Application'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'info.maaskant.wmsnotes.desktop.app.Application'
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}
